#!/usr/bin/env bash
mindepth=0
maxdepth=3
case=tc

. utils/parse_options.sh

if [ $# -gt 1 ]; then
    echo "Usage: $0 --mindepth 0 --maxdepth 1 [exp]" 1>&2
    echo ""
    echo "Show the system environments and the evaluation results in Markdown format."
    echo 'The default of <exp> is "exp/".'
    exit 1
fi

[ -f ./path.sh ] && . ./path.sh
set -euo pipefail
if [ $# -eq 1 ]; then
    exp=$1
else
    exp=exp
fi

echo "----- exp ${exp}"


cat << EOF
<!-- Generated by $0 -->
# RESULTS
## Environments
- date: \`$(LC_ALL=C date)\`
EOF

python3 << EOF
import sys, espnet, torch
pyversion = sys.version.replace('\n', ' ')

print(f"""- python version: \`{pyversion}\`
- espnet version: \`espnet {espnet.__version__}\`
- pytorch version: \`pytorch {torch.__version__}\`""")
EOF

cat << EOF
- Git hash: \`$(git rev-parse HEAD)\`
  - Commit date: \`$(git log -1 --format='%cd')\`

EOF

metrics="bleu"

for res_f in `find ${exp}/ -maxdepth 5 -mindepth 1 -type f -name "result.${case}.txt"`; do
    echo $res_f
    echo "## $(echo $(dirname ${res_f}) | cut -d"/" -f2)"
    for type in $metrics; do
        cat << EOF
### ${type^^}

|dataset|bleu_score|verbose_score|
|---|---|---|
EOF
    data=$(echo "${res_f}" | cut -d '/' -f4)
    bleu=$(sed -n '5p' "${res_f}" | cut -d ' ' -f 3 | tr -d ',')
    verbose=$(sed -n '7p' "${res_f}" | cut -d ' ' -f 3- | tr -d '",')
    echo "${data}|${bleu}|${verbose}"

    done
    # fi

done # < <(find ${exp} -mindepth ${mindepth} -maxdepth ${maxdepth} -type d)
